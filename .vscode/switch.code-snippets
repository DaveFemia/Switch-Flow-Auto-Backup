{
  // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  //these are the available entry points for Switch Scripting; all snippets have a prefix that starts with switch
  "jobArrived": {
    "prefix": "switchJobArrived",
    "body": ["async function jobArrived(s: Switch, flowElement: FlowElement, job: Job): Promise<void> {", "", "}"]
  },
  "timerFired": {
    "prefix": "switchTimerFired",
    "body": [
      "async function timerFired(s: Switch, flowElement: FlowElement): Promise<void> {",
      "  flowElement.setTimerInterval(500) //default",
      "}"
    ]
  },
  "getLibraryForProperty": {
    "prefix": "switchGetLibraryForProperty",
    "body": ["async function getLibraryForProperty(s: Switch, flowElement: FlowElement, tag: string): Promise<string[]> {", "", "}"]
  },
  "getLibraryForConnectionProperty": {
    "prefix": "switchGetLibraryForConnectionProperty",
    "body": [
      "async function getLibraryForConnectionProperty(s: Switch, flowElement: FlowElement, c: Connection, tag: string): Promise<string[]> {",
      "",
      "}"
    ]
  },
  "validateProperties": {
    "prefix": "switchValidateProperties",
    "body": [
      "async function validateProperties(s: Switch, flowElement: FlowElement, tags: string[]): Promise<{ tag: string, valid: boolean }[]> {",
      "  let retValues = [];",
      "  let tag, value;",
      "  for (let i = 0; i < tags.length; i++) {",
      "    tag = tags[i];",
      "    value = await flowElement.getPropertyStringValue(tag);",
      "    if (tag == 'some tag name') {",
      "      if (value == 'some accepted value') {",
      "        retValues.push({ tag: tag, valid: true });",
      "      } else {",
      "        retValues.push({ tag: tag, valid: false });",
      "      }",
      "    } else if (tag =='some other tag name') {",
      "      //",
      "    }",
      "  }",
      "  return retValues;",
      "}"
    ]
  },
  "validateConnectionProperties": {
    "prefix": "switchValidateConnectionProperties",
    "body": [
      "async function validateConnectionProperties(s: Switch, flowElement: FlowElement, c: Connection, tags: string[]): Promise<{ tag: string, valid: boolean }[]> {",
      "",
      "}"
    ]
  },
  "findExternalEditorPath": {
    "prefix": "switchfindExternalEditorPath",
    "body": ["async function findExternalEditorPath(s: Switch, flowElement: FlowElement, tag: string): Promise<string> {", "", "}"]
  },
  "httpRequestTriggeredSync": {
    "prefix": "switchHttpRequestTriggeredSync",
    "body": ["async function httpRequestTriggeredSync(request: HttpRequest, args: any[], response: HttpResponse, s: Switch): Promise<void> {", "", "}"]
  },
  "httpRequestTriggeredAsync": {
    "prefix": "switchHttpRequestTriggeredAsync",
    "body": ["async function httpRequestTriggeredAsync(request: HttpRequest, args: any[], s: Switch, flowElement: FlowElement): Promise<void> {", "", "}"]
  },
  "flowStartTriggered": {
    "prefix": "switchFlowStartTriggered",
    "body": ["async function flowStartTriggered(s : Switch, flowElement: FlowElement): Promise<void> {", "", "}"]
  },
  "flowStopTriggered": {
    "prefix": "switchFlowStopTriggered",
    "body": ["async function flowStopTriggered(s : Switch, flowElement: FlowElement): Promise<void> {", "", "}"]
  },
  "abort": {
    "prefix": "switchAbort",
    "body": ["async function abort(s : Switch, flowElement: FlowElement, job: Job, abortData: any): Promise<void> {", "", "}"]
  },
  "calculateScriptExpression": {
    "prefix": "switchCalculateScriptExpression",
    "body": ["async function calculateScriptExpression(s: Switch, flowElement: FlowElement, job: Job): Promise<string | number | boolean> {", "", "}"]
  }
}
